
* Framework:반제품

* Spring Framework
- 엔터프라이즈급 어플리케이션을 구축할 수 있는 가벼운 솔루션, 원스-스탑-숍(One-Stop-Shop):모든 과정을 한꺼번에 해결할 수 있는
- 모듈화가 잘 되어있어 가볍고 원하는 부분만 가져다 사용 가능(약 20개의 모듈로 구성)
- IoC 컨테이너이다
- 선언적으로 트랜잭션 관리 가능
- 완전한 기능을 갖춘 MVC Framework 제공
- AOP 지원
- 도메인 논리 코드와 쉽게 분리될 수 있는 구조

* Data Access/Integration
- spring-jdbc
- spring-tx

* Web
- spring-web
- spring-webmvc

--------------------------------------------

* 컨테이너(Container)
- 인스턴스의 생명주기를 우리 대신 관리해줌(핵심)
- 생성된 인스턴스들에게 추가적인 기능 제공

* IoC(Inversion of Control)
- 제어의 역전
- 개발자는 프로그램의 흐름을 제어하는 코드 작성 -> 이 흐름의 제어를 개발자가 X, 다른 프로그램이 그 흐름을 제어하는 것

* DI(Dependency Injection)
- 의존성 주입(해당 객체를 주입받는 방법 중에 하나, 만들어낸 의존성을 주입받는 방법)
- 클래스 사이의 의존 관계를 빈(Bean)설정 정보를 바탕으로 컨테이너가 자동으로 연결해주는 것을 말함
- 약속된 어노테이션(@)을 이용하여 선언만 해주면 알아서 객체를 생성, 주입해줌
- DI가 적용X -> 개발자가 직접 인스턴스 생성함
- DI가 적용O -> 컨테이너가 알아서 해줌

* Spring에서 제공하는 IoC/DI 컨테이너
- BeanFactory: IoC/DI에 대한 기본 기능 가지고 있음(너무 간단함)
- ApplicationContext: 위의 모든 기능 포함, 강추!!!
--- BeanPostProcessor, BeanFactoryPostProcessor
