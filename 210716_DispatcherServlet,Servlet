* DispatcherServlet
- 프론트 컨트롤러(Front Controller): ex)대표 번호로 전화하면 알아서 관련 부서연결해줌, 요청받아서 넘겨주기만 함
- 클라이언트의 모든 요청을 받은 후 처리할 핸들러에게 넘기고 핸들러가 처리한 결과를 받아 사용자에게 응답 결과를 보여줌
- 여러 컴포넌트를 이용해 작업 처리함

* DispatcherServlet 내부 동작흐름
- 요청 - 요청 선처리 작업 - HandlerExecutionChain결정 - HandlerExecutionChain실행 - 예외발생 - (yes - 예외처리) - (no) - 뷰렌더링 - 요청처리종료 - 요청이처리됨

****추가 공부 필요

----------------------------------

1.웹프로그래밍 기초의 Servlet로 넘어옴

* 웹 어플리케이션은 정적인 콘텐츠와 동적인 콘텐츠로 나눌 수 있음, 서블릿은 프로그램을 수행해서 페이지를 동적으로 만들어줌

* Java Web Application
- WAS에 설치(deploy)되어 동작하는 어플리케이션
- 자바 웹 어플리케이션에는 HTML, CSS, 이미지, 자바로 작성된 클래스(Servlet도 포함됨, package, 인터페이스 등), 각종 설정 파일 등 포함

* 자바 웹 어플리케이션의 폴더 구조
- WEB-INF폴더 - web.xml파일(배포 기술자, 웹어플리케이션의 정보를 다 갖고 있음, 3.0이상에선 어노테이션이 대신해줄 수 있어서 없어도 됨, but 중요)
              - lib폴더(각종 라이브러리들) - jar파일들
              - classes폴더(각종 클래스파일들, 서블릿 파일들) - java패키지, class들
- 리소스들
- 각종 폴더, 이미지, 다양한 리소스들

* Servlet
- 자바 웹 어플리케이션의 구성요소 중 동적인 처리함
- 정의해보면 servlet은 WAS에 동작하는 JAVA 클래스
- 서블릿은 HttpServlet클래스를 상속받아야 함
- JSP, Servlet을 조화롭게 사용하면 최상의 결과를 얻을 수 있음 ex)웹 페이지를 구성하는 화면(HTML)은 JSP로 표현, 복잡한 프로그래밍은 서블릿으로 구현

----------------------------------

* Servlet 작성방법
- 3.0이상: web.xml사용X, 자바 어노테이션 사용, 좀 더 발전된 형태, 간결
- 3.0미만: web.xml파일에 직접 등록

* http://localhost:8080/

